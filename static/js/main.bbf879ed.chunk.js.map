{"version":3,"sources":["components/video_list_item.js","components/video_list.js","components/search_bar.js","components/video_detail.js","App.js","serviceWorker.js","index.js"],"names":["videoListItem","props","onUserSelected","video","imageUrl","snippet","thumbnails","default","url","react_default","a","createElement","onClick","className","src","title","VideoList","videoItems","videos","map","video_list_item","onVideoSelect","key","etag","SearchBar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","onInputChange","bind","assertThisInitialized","event","setState","target","value","onSearchTermChange","_this2","onChange","React","Component","VideoDetail","videoId","id","concat","description","App","searchText","selectedVideo","videoSearch","searchterm","YTSearch","data","console","log","_this3","search_bar","searchTerm","video_detail","video_list","userSelected","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAqBeA,EAnBO,SAACC,GAAU,IAEtBC,EAAwBD,EAAxBC,eAAeC,EAASF,EAATE,MAChBC,EAAWD,EAAME,QAAQC,WAAWC,QAAQC,IAGlD,OACIC,EAAAC,EAAAC,cAAA,MAAIC,QAAS,kBAAMV,EAAeC,IAAQU,UAAU,mBAChDJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAeC,IAAKV,IACnCK,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBAAiBV,EAAME,QAAQU,WCQnDC,EAjBG,SAACf,GACf,IAAMgB,EAAahB,EAAMiB,OAAOC,IAAI,SAAChB,GACjC,OACIM,EAAAC,EAAAC,cAACS,EAAD,CACIlB,eAAgBD,EAAMoB,cACtBC,IAAKnB,EAAMoB,KACXpB,MAAOA,MAInB,OACIM,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACTI,WCYEO,cAzBX,SAAAA,EAAYvB,GAAM,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM3B,KACD+B,MAAQ,CAAEC,KAAM,IACrBR,EAAKS,cAAgBT,EAAKS,cAAcC,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAHPA,6EAKJY,GACVT,KAAKU,SAAS,CAACL,KAAOI,EAAME,OAAOC,QACnCZ,KAAK3B,MAAMwC,mBAAmBJ,EAAME,OAAOC,wCAEtC,IAAAE,EAAAd,KACL,OACInB,EAAAC,EAAAC,cAAA,OAAKE,UAAW,sBACZJ,EAAAC,EAAAC,cAAA,SACAE,UAAW,aACX2B,MAASZ,KAAKI,MAAMC,KACpBU,SAAYf,KAAKM,gBAEzBzB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,oBAAoBD,QAAS,kBAAI8B,EAAKzC,MAAMW,YAA9D,wBAlBgBgC,IAAMC,WCwBfC,EAxBK,SAAC7C,GACjB,IAAME,EAAQF,EAAME,MAEpB,IAAKA,EACD,OAAOM,EAAAC,EAAAC,cAAA,0BAGX,IAAMoC,EAAU5C,EAAM6C,GAAGD,QACnBvC,EAAG,iCAAAyC,OAAoCF,GAG7C,OACItC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAeC,IAAKN,KAE1CC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAeV,EAAME,QAAQU,MAA5C,KACAN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBAAqBV,EAAME,QAAQ6C,YAAlD,QC2BDC,cAvCb,SAAAA,EAAYlD,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACjB1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAM3B,KACD+B,MAAQ,CACXoB,WAAa,GACblC,OAAQ,GACRmC,cAAe,MALA5B,mFAUjBG,KAAK0B,kDAGKC,GAAY,IAAAb,EAAAd,KACtB4B,IAAS,CAAElC,IAjBC,0CAiBaW,KAAMsB,GAAc,SAACE,GAC5CC,QAAQC,IAAIF,GACZf,EAAKJ,SAAS,CACZpB,OAAQuC,EACRJ,cAAeI,EAAK,wCAMjB,IAAAG,EAAAhC,KACP,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkD,EAAD,CAAWjD,QAAS,kBAAIgD,EAAKN,YAAYM,EAAK5B,MAAMoB,aAAaX,mBAAoB,SAAAqB,GAAU,OAAIF,EAAKtB,SAAS,CAACc,WAAWU,OAC7HrD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoD,EAAD,CAAa5D,MAAOyB,KAAKI,MAAMqB,gBAC/B5C,EAAAC,EAAAC,cAACqD,EAAD,CACE3C,cAAe,SAAA4C,GAAY,OAAIL,EAAKtB,SAAS,CAAEe,cAAeY,KAC9D/C,OAAQU,KAAKI,MAAMd,kBAjCX2B,aCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bbf879ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst videoListItem = (props) => {\r\n    \r\n    const {onUserSelected,video} = props\r\n    const imageUrl = video.snippet.thumbnails.default.url;\r\n    //console.log(video)\r\n\r\n    return (\r\n        <li onClick={() => onUserSelected(video)} className=\"list-group-item\">\r\n            <div className=\"video-list media\">\r\n                <div className=\"media-left\">\r\n                    <img className=\"media-object\" src={imageUrl} />\r\n                    <div className=\"media-heading\">{video.snippet.title}</div>\r\n                </div>\r\n            </div >\r\n        </li >\r\n    );\r\n\r\n};\r\n\r\nexport default videoListItem;","import React from 'react';\r\nimport VideoListItem from './video_list_item';\r\n\r\n\r\nconst VideoList = (props) => {\r\n    const videoItems = props.videos.map((video) => {\r\n        return (\r\n            <VideoListItem\r\n                onUserSelected={props.onVideoSelect}\r\n                key={video.etag}\r\n                video={video} />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {videoItems}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default VideoList;","import React from 'react';\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { term: ''};\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n    }\r\n    onInputChange(event){\r\n        this.setState({term : event.target.value});\r\n        this.props.onSearchTermChange(event.target.value);\r\n    }\r\n    render() {\r\n        return(\r\n            <div className =\"search-bar-wrapper\">\r\n                <input\r\n                className =\"search-bar\" \r\n                value = {this.state.term}\r\n                onChange = {this.onInputChange} />\r\n            \r\n        <button className=\"search-bar-button\" onClick={()=>this.props.onClick()}>검색</button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst VideoDetail = (props) => {\r\n    const video = props.video;\r\n\r\n    if (!video) {\r\n        return <div>Loading ...</div>;\r\n    }\r\n\r\n    const videoId = video.id.videoId;\r\n    const url = `https://www.youtube.com/embed/${videoId}`;\r\n    \r\n\r\n    return (\r\n        <div className=\"video-detail\">\r\n            <div className=\"video-wrapper\">\r\n                <iframe className=\"video-iframe\" src={url}></iframe>\r\n            </div>\r\n            <div className=\"video-info\">\r\n                <div className=\"video-title\">{video.snippet.title} </div>\r\n                <div className=\"video-description\">{video.snippet.description} </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoDetail;","import React, { Component } from 'react';\nimport YTSearch from 'youtube-api-search';\nimport VideoList from './components/video_list';\nimport SearchBar from './components/search_bar';\nimport VideoDetail from './components/video_detail';\nconst API_KEY = 'AIzaSyCM-xLP9lTvHkCLFEs3H4ajYIGMfuLJOws';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText : '',\n      videos: [],\n      selectedVideo: null\n    };\n  }\n\n  componentDidMount(){\n    this.videoSearch();\n  }\n\n  videoSearch(searchterm) {\n    YTSearch({ key: API_KEY, term: searchterm }, (data) => {\n      console.log(data);\n      this.setState({\n        videos: data,\n        selectedVideo: data[0]\n      });\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <SearchBar onClick={()=>this.videoSearch(this.state.searchText)} onSearchTermChange={searchTerm => this.setState({searchText:searchTerm})} />\n        <div>\n        <VideoDetail video={this.state.selectedVideo} />\n        <VideoList \n          onVideoSelect={userSelected => this.setState({ selectedVideo: userSelected })}\n          videos={this.state.videos} />\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}